Heterogeneous Graphs
	Graph with multiple types of edges / links
	KG is an instance of heterogenours graph
	G=(V, E, R, T)
		V nodes
		E edges (vi, r, vj) --> r = Relation
		Node typee T(v)
		Relation type r in R
	Example: Biomedical KG, Event Graph, etc.

Relational GCN --> Extend GCN to handle heterogenours graphs
	Normal GCN: Messaged passing along the direction of edges
		Messagge computation -> message aggregation --> Nonlinearity (either message or aggregation)
	Multiple Relation type (e.g. edges of different colors)
		Idea: Different weights for every relationship type
		Für jede Relation, normalisiert über Anzahl dieser Relation an Knoten die Aggregation der Knoten mit dieser Relation (+Selfloop)
		can become really big very quickly, if you have a lot of relation types (which is common in knowledge graphs)
			regulize
				turn into block matrixes --> parameter B to do bxb blocks in diagonal matrix --> reduces parameters by factor B
				Basis Learning: Share weights across different relations --> Some might not be independent
					But a basis as "dictionary", all Relationship Weightmatrixes are a multiple of this basis --> Model would only need to learn scalars
	

Knowledge Graph Embeddings
	Edges in Knowledge Graph: (h, r, t) --> head, relation, tail
		shallow embedding:  embedding of (h, r) should be close to embedding of t 
			TransE: Learn Embedding h, learn embedding t, find vector r --> scoring is h+r-t (the closer this is to 0 the better it is)
			TransR:
				model entities as vectors in entity space Rd
				model relation as vector in relationship space Rk with relationship specific matrix Mr in Rkxd 
		gnn: 
		
		

Do Relational GCN
	node2vec, add 1 node connected to all of them (or only to hosts?)
	run node2vec several times for each relationship type --> cannot do it only for hosts anymore
	aggregate both of these results -> learned? 50/50?
	
Put temporal aspect into nodes --> use node2vec to calculate embeddings


TransE cannot model 1-to-N relations --> host edge is impossible like that
TransE could model call/get's called by edges (inverse relation)

TransR might also be an option

Any Callgraph that we know was slow --> Rank all propagation/interference graphs based on embedding
	Ground Truth Ranking: rank on which node the propagation happened
		Propagation graphs should have interference at same node as Ground truth
		Generate Ground Truth automatically by just looking at temporal aspects
		Use GCN for scalability then
	

